#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <arpa/inet.h>
#include <signal.h>
#include <wait.h>
#include <unistd.h>
#include "graph.h"
#include "search.h"

#define MAXLINE 4096 /*max text line length*/
#define SERV_PORT 5000 /*port*/
#define LISTENQ 8 /*maximum number of client connections */

GtkWidget *window;
GtkWidget *grid;
GtkWidget *buttons[10][10];

int listenfd, connfd, sockfd;
pid_t childpid;
socklen_t clilen;
char buf[MAXLINE], sendline[MAXLINE], recvline[MAXLINE];
struct sockaddr_in cliaddr, servaddr;
int player;
int turn = 0;
int map[6][8];

typedef struct {
  int x;
  int y;
} Point;

typedef struct {
  void *arg1;
  void *arg2;
} Args;

int main(int argc, char *argv[])
{
  FILE *f = fopen("map.txt", "r+");

  while (!feof(f)) {
    int x, y, status;
    fscanf(f, "%d %d %d\n", &x, &y, &status);
  }
  
  //Graphic
  gtk_init(&argc, &argv);
  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_widget_set_size_request(window, 600, 800);
  gtk_window_set_resizable(GTK_WINDOW(window), FALSE);
  g_signal_connect_swapped(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
  
  GtkWidget *grid = gtk_grid_new();
  gtk_grid_set_column_homogeneous(GTK_GRID(grid), TRUE);
  gtk_grid_set_row_homogeneous(GTK_GRID(grid), TRUE);
  
  for (int i = 0; i < 48; i++) {
    int x = i % 6;
    int y = i / 6;
    buttons[x][y] = gtk_button_new();
    gtk_grid_attach(GTK_GRID(grid), buttons[x][y], x, y, 1, 1);
  }

  gtk_container_add(GTK_CONTAINER(window), grid);

  gtk_widget_show_all(window);
  
  gtk_main();
}
